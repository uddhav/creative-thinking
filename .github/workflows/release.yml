name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  # Job 1: Create Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          
          # Validate version format
          if ! echo "$VERSION" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$'; then
            echo "❌ Invalid version format: $VERSION"
            echo "Version must be in format: vX.Y.Z or vX.Y.Z-suffix"
            exit 1
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "📦 Building release for version: ${VERSION}"

      - name: 📝 Generate release notes
        id: release_notes
        run: |
          # Generate changelog since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "First release!" > RELEASE_NOTES.md
          else
            echo "## What's Changed" > RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            
            # Features
            echo "### ✨ Features" >> RELEASE_NOTES.md
            git log $LAST_TAG..HEAD --grep="feat:" --pretty=format:"- %s (%h)" >> RELEASE_NOTES.md || echo "- No new features" >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            
            # Bug fixes
            echo "### 🐛 Bug Fixes" >> RELEASE_NOTES.md
            git log $LAST_TAG..HEAD --grep="fix:" --pretty=format:"- %s (%h)" >> RELEASE_NOTES.md || echo "- No bug fixes" >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            
            # Other changes
            echo "### 📚 Other Changes" >> RELEASE_NOTES.md
            git log $LAST_TAG..HEAD --grep="^(docs|style|refactor|perf|test|build|ci|chore):" --pretty=format:"- %s (%h)" >> RELEASE_NOTES.md || echo "- Various improvements" >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            
            # Contributors
            echo "### 👥 Contributors" >> RELEASE_NOTES.md
            git log $LAST_TAG..HEAD --pretty=format:"%an" | sort -u | sed 's/^/- @/' >> RELEASE_NOTES.md
          fi
          
          echo "Release notes generated"

      - name: 🚀 Create GitHub Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          bodyFile: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'alpha') }}
          token: ${{ secrets.GITHUB_TOKEN }}

  # Job 2: Build and Upload Assets
  build-assets:
    name: Build Release Assets
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            archive: tar.gz
          - os: windows-latest
            platform: windows
            archive: zip
          - os: macos-latest
            platform: macos
            archive: tar.gz
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔨 Build project
        run: npm run build

      - name: 📦 Create distribution package
        run: |
          # Create distribution directory
          mkdir -p creative-thinking-${{ matrix.platform }}
          
          # Copy built files
          cp -r dist/* creative-thinking-${{ matrix.platform }}/
          cp package.json creative-thinking-${{ matrix.platform }}/
          cp README.md creative-thinking-${{ matrix.platform }}/
          cp LICENSE creative-thinking-${{ matrix.platform }}/ || true
          
          # Create minimal package.json for distribution
          node -e "
          const pkg = require('./package.json');
          const distPkg = {
            name: pkg.name,
            version: pkg.version,
            description: pkg.description,
            main: pkg.main,
            bin: pkg.bin,
            keywords: pkg.keywords,
            author: pkg.author,
            license: pkg.license,
            dependencies: pkg.dependencies
          };
          require('fs').writeFileSync('./creative-thinking-${{ matrix.platform }}/package.json', JSON.stringify(distPkg, null, 2));
          "

      - name: 📦 Create archive (Linux/macOS)
        if: matrix.archive == 'tar.gz'
        run: |
          tar -czf creative-thinking-${{ matrix.platform }}-${{ needs.create-release.outputs.version }}.tar.gz creative-thinking-${{ matrix.platform }}

      - name: 📦 Create archive (Windows)
        if: matrix.archive == 'zip'
        run: |
          Compress-Archive -Path creative-thinking-${{ matrix.platform }}/* -DestinationPath creative-thinking-${{ matrix.platform }}-${{ needs.create-release.outputs.version }}.zip

      - name: 📤 Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          files: creative-thinking-${{ matrix.platform }}-${{ needs.create-release.outputs.version }}.${{ matrix.archive }}
          token: ${{ secrets.GITHUB_TOKEN }}

  # Job 3: Publish to npm
  publish-npm:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: [create-release, build-assets]
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔨 Build project
        run: npm run build

      - name: 🚀 Publish to npm
        run: |
          # Check if version already exists
          if npm view ${{ github.event.repository.name }}@${{ needs.create-release.outputs.version }} > /dev/null 2>&1; then
            echo "Version already published, skipping"
          else
            npm publish --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Job 4: Docker Build
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🔑 Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/creative-thinking
            ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.create-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.create-release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.create-release.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max